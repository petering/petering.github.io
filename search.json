[{"title":"Hello World","url":"/2022/04/11/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Java中的参数传递","url":"/2022/04/11/java%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/","content":"Java中的参数传递1、八种基本数据类型都是值传递形参是实参的拷贝，改变形参的值不会影响实参–单向传递\npublic class IntegerTest01 &#123;    private static void changeInt(int value) &#123;        ++value;    &#125;    public static void main(String[] args) &#123;        int a = 1;        changeInt(a);        System.out.println(&quot;a = &quot; + a);    &#125;&#125;\n\na=1\n\n\n\n\n\n序号\n数据类型\n备注\n\n\n\n1\nbyte\nbyte b&#x3D;10;\n\n\n2\nshort\nshort s &#x3D; 10;\n\n\n3\nint\nint i &#x3D; 10;\n\n\n4\nlong\nlong l &#x3D; 10l;\n\n\n5\nfloat\nfloat f &#x3D; 10.0f;\n\n\n6\ndouble\ndouble d &#x3D; 10.0d;\n\n\n7\nchar\nchar c &#x3D; ‘c’;\n\n\n8\nboolean\nboolean b &#x3D; true;\n\n\n2、对象类型都是引用传递《Head First Java》中关于 Java 参数传递的说明：\n\nJava 中所传递的所有东西都是值，但此值是变量所携带的值。引用对象的变量所携带的是远程控制而不是对象本身，若你对方法传入参数，实际上传入的是远程控制的拷贝。\n\n《深入理解 JVM 虚拟机》中关于 Sun HotSpot 虚拟机进行对象访问的方式的说明：\n\n如果使用直接指针，那么 Java 堆对象的布局中就必须考虑如何放置访问对象类型数据的相关信息，而 reference 中存储的直接就是对象地址。\n\n在 Java 中声明并初始化一个对象Object object = new Object()，在堆中存储对象实例数据，在栈中存储对象地址，这里的变量 object 相当于 C&#x2F;C++ 中的指针。\n因此，可以通过 Java 对象的引用，达到指针传递的效果。\npublic class IntegerTest02 &#123;    private static void changeInt(int[] value) &#123;        ++value[0];    &#125;    public static void main(String[] args) &#123;        int[] a = &#123;1&#125;;        changeInt(a);        System.out.println(&quot;a[0] = &quot; + a[0]);    &#125;&#125;\n\na[0]=2\n\n3、例子值传递：\npublic class IntegerTest01 &#123;    private static void changeInt(int value) &#123;        ++value;    &#125;    public static void main(String[] args) &#123;        int a = 1;        changeInt(a);        System.out.println(&quot;a = &quot; + a);    &#125;&#125;\n\na=1\n\n将基本参数类型int换成对象类型Integer\npublic class IntegerTest02 &#123;    private static void changeInteger(Integer value) &#123;        ++value;    &#125;    public static void main(String[] args) &#123;        Integer a = 1;        changeInteger(a);        System.out.println(&quot;a = &quot; + a);    &#125;&#125;\n\na=2\n\n4、结论在Java中，当对象作为参数传递时，实际上传递的是一份“引用的拷贝”。\n基本类型只有栈没有堆；\n引用类型既有栈又有堆；\njava中除了 8个基本的数据类型以外，其余的全都是引用类型！\n注意：\nString str &#x3D; “Java666”;—&gt;值传递\n关于字符串做参数，也是看它的参数变量指向是否发生了变化，因为String的底层为final类型的char[]原因，当你在String s &#x3D; “aaa”或者String s &#x3D; new String(“aaa”)时，都会为s创建一个新的对象引用。但是调用了append（）方法时，是不会指向新的对象，会在原来的指向的对象上发生改变，与它共享的对象引用也会发生变化。\n"},{"title":"my first blog","url":"/2022/04/11/my-first-blog/","content":""}]